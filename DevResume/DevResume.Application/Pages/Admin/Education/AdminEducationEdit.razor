@layout AdminLayout
@page "/admin/resumes/{ResumeId:int}/edu/{Id:int}"
@using Microsoft.AspNetCore.Http
@using DevResume.ServiceLayer.Services
@using DevResume.ServiceLayer.Services.Interfaces
@using DevResume.Domain.Entities

@inject IHttpContextAccessor HttpContextAccessor
@inject IEducationService EducationService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<AdminResumeMenu ResumeId="@ResumeId" />

<div class="row">
    <div class="col-md-6 offset-md-3">
        <div class="card">
            @if (Id == 0)
            {
                <h1 class="card-title">
                    New education
                </h1>
            }
            else
            {
                <h1 class="card-title">
                    @education.Degree (@education.YearFrom - @education.AdaptYearTo)
                </h1>
            }
            <div class="card-actions">
                <button type="submit" form="educationForm" class="btn btn-primary">
                    Save
                </button>
                <NavLink href="@($"/admin/resumes/{ResumeId}/edu")" class="btn btn-secondary">
                    Back
                </NavLink>
            </div>
            <div class="card-content">
                <EditForm id="educationForm" Model="@education" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>
                            Degree:
                        </label>
                        <InputText id="degree" @bind-Value="education.Degree" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>
                            University:
                        </label>
                        <InputText id="university" @bind-Value="education.University" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>
                            Program:
                        </label>
                        <InputText id="program" @bind-Value="education.Program" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>
                            From:
                        </label>
                        <InputNumber id="yearFrom" @bind-Value="education.YearFrom" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>
                            Not finished:
                        </label>
                        <InputCheckbox id="isFinished" @bind-Value="education.NotFinished" class="form-control form-checkbox" />
                    </div>
                    @if (!education.NotFinished)
                    {
                        <div class="form-group">
                            <label>
                                To:
                            </label>
                            <InputNumber id="yearTo" @bind-Value="education.YearTo" class="form-control" />
                        </div>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int ResumeId { get; set; }

    [Parameter]
    public int Id { get; set; }

    private Education education = new Education();

    protected override async Task OnInitializedAsync()
    {
        var userName = HttpContextAccessor.HttpContext.User.Identity.Name;
        if (!await AuthService.AuthorizeResume(userName, ResumeId))
            NavigationManager.NavigateTo("/admin/notfound");

        education = Id == 0 ? new Education() : await EducationService.GetEducation(Id);

        if (Id != 0 && education.YearTo == 0)
        {
            education.NotFinished = true;
        }
    }

    private async Task HandleSubmit()
    {
        if (Id == 0)
        {
            var userName = HttpContextAccessor.HttpContext.User.Identity.Name;
            if (!await AuthService.AuthorizeResume(userName, ResumeId))
                NavigationManager.NavigateTo("/admin/notfound");

            await EducationService.AddEducation(education, ResumeId);
        }
        else
        {
            var userName = HttpContextAccessor.HttpContext.User.Identity.Name;
            if (!await AuthService.AuthorizeEducation(userName, education.Id))
                NavigationManager.NavigateTo("/admin/notfound");

            await EducationService.UpdateEducation(education);
        }

        NavigationManager.NavigateTo($"/admin/resumes/{ResumeId}/edu");
    }

}